{{- if or (eq .Values.agentWindows.enabled true) (not (hasKey .Values.agentWindows "enabled")) }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ .Values.agentWindows.name | default "snow-agent-win" }}
  labels:
    app: "{{ .Values.agentWindows.name | default "snow-agent-win" }}-app"
    {{- if .Values.agentWindows.labels }}
{{ include "agent.labels" . | indent 4 }}
    {{- end }}
spec:
  selector:
    matchLabels:
      app: "{{ .Values.agentWindows.name | default "snow-agent-win" }}-app"
  template:
    metadata:
      labels:
        app: "{{ .Values.agentWindows.name | default "snow-agent-win" }}-app"
        {{- if .Values.agentWindows.templateLabels }}
{{ include "agent.templateLabels" . | indent 8 }}
        {{- end }}
    spec:
      securityContext:
        windowsOptions:
          runAsUserName: "ContainerUser"
      serviceAccountName: {{ .Values.agent.accountName | default "snow-account" }}
      {{- if .Values.agentWindows.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.agentWindows.imagePullSecrets | indent 8 }}
      {{- end }}
      containers:
        - name: {{ .Values.agentWindows.name | default "snow-agent-win" }}
          image: "{{ .Values.agentWindows.repository }}:{{ .Values.agentWindows.tag }}"
          imagePullPolicy: {{ .Values.agentWindows.imagePullPolicy }}
          volumeMounts:
            - name : snow-agent-ca
              mountPath: /c/Users/ContainerUser/rootca/
            - name : snow-agent-ssl
              mountPath: /c/Users/ContainerUser/cert/
            - name : nsqd-ssl
              mountPath: /c/Users/ContainerUser/servercert/
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_UID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NSQD_HEADLESS
              value: {{ .Values.service.headlessName | default "snow-service-headless" }}
            - name: NSQD_HOST
              value: "{{ .Values.service.name | default "snow-service" }}:{{ .Values.service.port | default 4150 }}"
            - name: CLIENT_CERT
              value: "/c/Users/ContainerUser/cert/tls.crt"
            - name: CLIENT_CERT_KEY
              value: "/c/Users/ContainerUser/cert/tls.key"
            - name: CA_CERT_FILE
              value: "/c/Users/ContainerUser/rootca/tls.crt"
            
            {{- if .Values.agentWindows.additionalEnvironmentVars }}
            {{- range .Values.agentWindows.additionalEnvironmentVars }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end}}
            {{- end}}
          resources:
{{ toYaml .Values.agentWindows.resources | indent 12 }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - all
      volumes:
        - name:  snow-agent-ca
          secret:
            secretName: {{ .Values.existingAgentCertificate | default "snow-cert-ca" }}
        - name:  snow-agent-ssl
          secret:
            secretName: {{ .Values.existingAgentCertificate | default "snow-cert-agent" }}
        - name : nsqd-ssl
          secret:
            secretName: {{ .Values.existingMQCertificate | default "snow-cert-mq" }}
      {{- if .Values.agentWindows.affinity }}
      affinity:
{{ toYaml .Values.agentWindows.affinity | indent 8 }}
      {{- end}}
      {{- if .Values.agentWindows.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.agentWindows.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.agentWindows.tolerations }}
      tolerations:
{{ toYaml .Values.agentWindows.tolerations | indent 8 }}
      {{- end }}
{{- end }}
{{- if or .Values.existingAgentCertificate (or .Values.existingAggregatorCertificate .Values.existingMQCertificate) }}
{{- if or (not .Values.existingAgentCertificate) (or (not .Values.existingAggregatorCertificate) (not .Values.existingMQCertificate)) }}
{{- fail "Values for existingAgentCertificate, existingAggregatorCertificate and existingMQCertificate must ALL be provided." }}
{{- end}}
{{- else }}
{{- $ca := genCA "samcon-ca" 3650 -}}
{{- $altNamesMQ := list ( printf "samcon.%s" .Release.Namespace ) ( printf "samcon.%s.svc" .Release.Namespace ) ( "snow-service" ) ( "snow-service-headless" ) ( "localhost" ) ("https://localhost:4152/stats") -}}
{{- $certMQ := genSignedCert "samcon" nil $altNamesMQ 3650 $ca -}}
{{- $altNamesAggregator := list ( printf "samcon.aggregator.%s" .Release.Namespace ) ( printf "samcon.aggregator.%s.svc" .Release.Namespace ) -}}
{{- $certAggregator := genSignedCert "samcon.aggregator" nil $altNamesAggregator 3650 $ca -}}
{{- $altNamesAgent := list ( printf "samcon.agent.%s" .Release.Namespace ) ( printf "samcon.agent.%s.svc" .Release.Namespace ) -}}
{{- $certAgent := genSignedCert "samcon.agent" nil $altNamesAgent 3650 $ca -}}

apiVersion: v1
data:
  tls.crt: {{ $ca.Cert | b64enc | quote }}
  tls.key: {{ $ca.Key | b64enc | quote }}
kind: Secret
metadata:
  name: snow-cert-ca
type: kubernetes.io/tls

---
apiVersion: v1
data:
  tls.crt: {{ $certAgent.Cert | b64enc | quote }}
  tls.key: {{ $certAgent.Key | b64enc | quote }}
kind: Secret
metadata:
  name: snow-cert-agent
type: kubernetes.io/tls

---
apiVersion: v1
data:
  tls.crt: {{ $certAggregator.Cert | b64enc | quote }}
  tls.key: {{ $certAggregator.Key | b64enc | quote }}
kind: Secret
metadata:
  name: snow-cert-aggregator
type: kubernetes.io/tls
---
apiVersion: v1
data:
  tls.crt: {{ $certMQ.Cert | b64enc | quote }}
  tls.key: {{ $certMQ.Key | b64enc | quote }}
kind: Secret
metadata:
  name: snow-cert-mq
type: kubernetes.io/tls

{{- end }}
